<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tags: Books | Erik Bergenholtz' blog]]></title>
  <link href="http://erikbergenholtz.github.io/erikbergenholtz/blog/categories/books/atom.xml" rel="self"/>
  <link href="http://erikbergenholtz.github.io/erikbergenholtz/"/>
  <updated>2017-07-20T11:20:39+02:00</updated>
  <id>http://erikbergenholtz.github.io/erikbergenholtz/</id>
  <author>
    <name><![CDATA[Erik Bergenholtz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Book Review - Ansible: From Beginner to Pro]]></title>
    <link href="http://erikbergenholtz.github.io/erikbergenholtz/blog/2017/07/20/book-review-ansible-from-beginner-to-pro/"/>
    <updated>2017-07-20T01:41:33+02:00</updated>
    <id>http://erikbergenholtz.github.io/erikbergenholtz/blog/2017/07/20/book-review-ansible-from-beginner-to-pro</id>
    <content type="html"><![CDATA[<p>It&rsquo;s time for another book review. This time of Michael Heap&rsquo;s
<a href="http://www.apress.com/us/book/9781484216606">Ansible: From Beginner to Pro</a>,
published by <a href="http://www.apress.com/">Apress</a>. The 200 page book is, as the
name suggests, about the orchestration tool Ansible. It&rsquo;s a tool that I don&rsquo;t
have any previous experience of, but I&rsquo;m looking forward to trying it out in
the real world! Now, let&rsquo;s jump into it!</p>

<p>For being such a short book it covers quite a few topics. It assumes no
previous knowledge, and starts from the very beginning. It then walks through
the various components of Ansible projects, like inventory files (files
containing lists of hosts to run Ansible against), roles and how to write your
own modules with Python. The explanations are clear, and throughout the book a
running example (consisting of a WordPress installation) is used to demonstrate
the different topics. The nice tone and spacious layout also contributes to make
reading the book a pleasant experience, and I managed to read the full thing
cover to cover in about a weekend without trying too hard.</p>

<p>So, are there anything that&rsquo;s not that great about the book? Well, I had issues
with a few steps along the way, and while I did manage to solve I would&rsquo;ve
liked some form of guidance from the book. It doesn&rsquo;t cover troubleshooting at
all, which come to think of it none of the other books I&rsquo;ve reviewed have
either (I particularly remember trying desperately to understand the Haskell
error messages I got when reading <em>Learn you a Haskell</em>, which are all quite
cryptic). It was a while since I read the book, so I don&rsquo;t remember specifically
what the issues where, but I do remember that for a beginner like myself the
solution wasn&rsquo;t immediately obvious. Apart from this I have no big issues with
the book. I enjoyed both it and the tool quite a bit, and I hope the other
books from Apress have the same standard (I have a few in my backlog).</p>

<p>Now, on to the big question: Am I an Ansible pro now? After all, that&rsquo;s
what the book&rsquo;s name suggests I should be. To be fair, I think that <em>pro</em>
might be a slight exaggeration. While I think that I could probably orchestrate
a server reasonably well using Ansible at this point, there&rsquo;s still a lot to
learn. The book mentions some best practices for various parts of the tool, but
my experience from other areas tell me that while I may understand these, it&rsquo;ll
take a bit of active use of the tool before they&rsquo;re fully internalized. That
being said, I do believe that I know enough to orchestrate a server. And I will
    soon know for sure; I bought a VPS recently and I plan to orchestrate it using
Ansible, both for simplicity and for practice. This will happen sometime during
the coming week, so I&rsquo;ll get back to you then. I also have some neat ideas
regarding orchestrating localhost that I want to try out, so and I&rsquo;ll let you
read all about it once I&rsquo;ve given it a go.</p>

<p>To conclude, would I recommend this book? If you&rsquo;re a sysadmin on any level,
be it on a hobby level like me or a professional level like not me, yes. It&rsquo;s
a tool that makes the setting up of a server a lot easier, and the fact that
you can dry-run your playbooks in a virtual environment without any fuzz is
great. If you&rsquo;re not a sysadmin I wouldn&rsquo;t recommend it though. It&rsquo;s a pleasant
read nonetheless, but I don&rsquo;t think you&rsquo;ll get much out of it. Unless, of
course, my little experiment works. Then you might want to have a look at it
for ricing reasons. We&rsquo;ll see I guess. Until then!</p>

<p>Happy Hacking</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Thoughts on Gray Hat Hacking: The Ethical Hacker's Handbook]]></title>
    <link href="http://erikbergenholtz.github.io/erikbergenholtz/blog/2017/07/11/my-thoughts-on-gray-hat-hacking/"/>
    <updated>2017-07-11T00:00:00+02:00</updated>
    <id>http://erikbergenholtz.github.io/erikbergenholtz/blog/2017/07/11/my-thoughts-on-gray-hat-hacking</id>
    <content type="html"><![CDATA[<p>Here we are again, I&rsquo;ve actually read another book. That makes four this year,
out of which three have been on some form of computer related topic. So my
New Year&rsquo;s resolution to read twelve books this year is actually looking like
it&rsquo;s doable.</p>

<p>But enough beating around be bush, if you&rsquo;re reading this it&rsquo;s because you want
to know what I think of <a href="http://pages.cs.wisc.edu/~ace/media/gray-hat-hacking.pdf">Gray Hat Hacking: The Ethical Hacker&rsquo;s Handbook</a>,
so here&rsquo;s what I think of it: I&rsquo;m not sure. I think that I may be a poor judge,
because I was expecting more than I got. See, this book is quite praised in
hacker circles, at least as I remember it from the days when I used to hang out
in hacker forums. It is one of <em>the</em> books you should read if you want to get
into the world of hacking. So knowing this I obviously expected miracles, more
or less, when I started reading. Unfortunately, that is not what <em>I</em> got.</p>

<p>Before we go any further, I want to point out a few things. Firstly, I have not
read this cover to cover. I&rsquo;ve read the better part of it, but I&rsquo;ve skipped
quite some text that I didn&rsquo;t have a need for right now. This mostly involves
fluff like how to use specific tools, what it means to be an <em>Ethical Hacker</em>.
Secondly, since I have an education in computer security where I have actually
had this book as course literature (I didn&rsquo;t read it at the time though), I knew
a lot of these things before. This is part of the reason why I didn&rsquo;t get the
miracle I was expecting. With that out of the way, let&rsquo;s get into the meat of'er!</p>

<p>The book quite hefty at 672 pages. It covers <em>a lot</em> of topics, ranging from how
to report found vulnerabilities to basic programming (I&rsquo;m coming back to this
later) to quite advanced tricks to get around protection schemes. This is why I
believe that it&rsquo;s considered such a good book to read if you want to enter the
world of hacking; it does give an introduction to a great many things. However,
some of these fields are covered so briefly that they might as well have left
them out. This includes SQL and XSS injections, that are only really touched
upon. Other topics, buffer overflows in particular, are elaborated on. The
explanations of these topics are well composed, with working(ish) examples,
complete with code, explanations and references. This allow you to follow along
for the most part, which is great! As opposed to Black Hat Python, where the
code examples comes first and the explanation afterwards, here the explanation
of the vulnerability comes first and the exploit is then iteratively
constructed, showing all steps along the way. The only real problem I have with
this is that their type setting for the code segment is quite bad, and sometimes
separate lines are printed on the same line. This is really a minor complaint
though.</p>

<p>One thing that is not the books fault, but decreases the value of it none the
less, is that it is a book and it&rsquo;s written in 2011. This means that some of the
things brought up in it is no longer possible, or no longer relevant. For
instance, the book walked throught the process of injecting shellcode via the
<code>.dtors</code> section of a program (I&rsquo;m not explaining that further, not in this
post at least). That section is replaces with <code>.fini_array</code> since GCC 4.7, which
works differently and makes the covered attack impossible. There&rsquo;s likely a
similar attack that exploits the new format, but for obvious reasons the book
doesn&rsquo;t cover it. There are a number of such instances, but as mentioned it&rsquo;s
not the fault of the authors but rather the ever-changing nature of the field.</p>

<p>Another thing that I find strange about the book is it&rsquo;s pacing. It&rsquo;s covering
fairly advanced attacks and how to construct your own shellcode, while at the
same time covering basic programming. This section is really quite short and as
I&rsquo;m quite adept at programming I only skimmed it, but I could see that it was on
the level of &ldquo;every C program needs a function called <code>main()</code>&rdquo;. In other words,
that part of the text was aimed at someone who has never seen a line of code.
This is odd to me, as security is no basic topic. Sure, there are a ton of
script kiddies who run around on the interwebs thinking they&rsquo;re 1337 hax0rz
because the figured out how to download LOIC (or whatever is the latest and
greatest DDoS tool now-a-days), but this is a book that aims to educate security
professionals. Demanding a certain amount of previous knowledge of how C,
memory and such works would not be too much to ask in my opinion. Especially
when, as I said, shellcode construction is covered. This involves writing
(short) C programs that do what you want, compiling them and removing any
unnecessary ASM that the compiler added, only to then assemble and extract the
opcodes. In other words, it&rsquo;s nothing you&rsquo;d be able to do confidently if you
don&rsquo;t know C before you start reading.</p>

<p>Apart from this I like the book. I didn&rsquo;t get much out of it, but that is
because I already knew most of it. The parts I didn&rsquo;t know where quite
interesting to read about, and as I said it covers the topics well. Because of
this I&rsquo;d agree with the statement that this is one of <em>the books</em> to read if you
want to get going with <em>ethical</em> hacking. Do yourself a favour and wait until
you&rsquo;re at least somewhat proficient in C and x86 assembler before you pick up
the book though, as you might have a hard time understanding some of the
examples otherwise.</p>

<p>That&rsquo;s it for now, I hope you enjoyed this.. reviewish. Until next time,</p>

<p>Happy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initial Impressions: Black Hat Python]]></title>
    <link href="http://erikbergenholtz.github.io/erikbergenholtz/blog/2017/07/10/initial-impressions-bhp/"/>
    <updated>2017-07-10T00:00:00+02:00</updated>
    <id>http://erikbergenholtz.github.io/erikbergenholtz/blog/2017/07/10/initial-impressions-bhp</id>
    <content type="html"><![CDATA[<p>The other day I dug my teeth into a new piece of literature:
<a href="https://www.nostarch.com/blackhatpython">Black Hat Python: Python Programming for Hackers and Pentesters</a>
by <a href="https://www.nostarch.com/">No Starch Press</a>. Anyone who&rsquo;s spent more then
five minutes on this site probably knows that No Starch is my favorite publisher
and that I think they usually publish books of high quality. Spoiler alert; this
book does not fall in that category.</p>

<p>Before I go on, I want to give a short disclaimer though. This is by no means a
<em>book review</em>. I have not read the whole thing cover to cover (yet), I have just
read the first few chapters and put it away because I really disliked the way
the author&rsquo;s style of teaching. I plan on reading the full thing at some point
and give a <em>proper</em> review, but I want to give some kind of a heads up for
anyone reading. So, let&rsquo;s do it!</p>

<p>First off, I was quite excited to read this. I enjoy working with Python, and
would say that it&rsquo;s probably the language I use the most. I&rsquo;m also quite
interested in computer security, and one of my previous goals was to become a
professional pentester. So obviously this book was quite appealing. The book is
written by Justin Seitz, who at the time of writing writing the book worked at
Immunity Inc with security analysis. He&rsquo;s also written another book for No
Starch Press called <a href="https://www.nostarch.com/ghpython.htm">Gray Hat Python</a>
(which I&rsquo;ll get arount to reading Soon™), so it all seems good! The book covers
a range of topics, from how to set up the testing environment to how to automate
forenic tasks, spread trojans via github, and playing around with the network.
From just looking at it from the outside, it looks like a really nice book (it
has a nice cover too!)</p>

<p>Unfortunately, as the saying goes, you should not judge a book by it&rsquo;s cover.
While the text itself holds up to the quality of the other No Starch books I&rsquo;ve
read, the actual <em>content</em> of the book does not. Each section in the book
describes a problem, like needing a quick way to send commands to a compromised
server. The text then guides you through a solution to the problem, and this is
where the problems start. Firstly, the solution is presented <em>before</em> the
explanation of even the steps to take. This might seem like a small issue, and
maybe it is for some, but I prefer to give it a go myself first, <em>before</em> I look
at a solution. I know this might be hard with books like this, but just listing
what the solution must do isn&rsquo;t too much to ask, is it? The second thing that
bugged me, which is what made me put the book away, is the actual explanations
themselves. They are really short, and don&rsquo;t explain much at all. To showcase
this, let&rsquo;s have a look at the following example:</p>

<pre><code class="python">class Server (paramiko.ServerInterface):
    def _init_(self):
        self.event = threading.Event()
    def check_channel_request(self, kind, chanid):
        if kind == 'session':
            return paramiko.OPEN_SUCCEEDED
        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED
    def check_auth_password(self, username, password):
        if (username == 'justin') and (password == 'lovesthepython'):
            return paramiko.AUTH_SUCCESSFUL
        return paramiko.AUTH_FAILED
</code></pre>

<p>A simple enough python class, that is used to build an SSH-server to send
commands through to the client, which is uploaded to the victim. The
explanation for the code is as follows:</p>

<blockquote><p>just like we did earlier in the chapter, and then SSHinize it</p></blockquote>

<p>This is not the first thing the book covered on SSH using the Paramiko library,
but a class was never used. Also, none of the Paramiko flags were used earlier.
But their names are good, so it&rsquo;s easy enough to understand the function of the
Server-class anyway. Now, let&rsquo;s skip forward in the code:</p>

<pre><code class="python">bhSession = paramiko.Transport(client)
bhSession.add_server_key(host_key)
server = Server()
try:
    bhSession.start_server(server=server)
except paramiko.SSHException, x:
    print '[-] SSH negotiation failed.'
chan = bhSession.accept(20)
</code></pre>

<p>None of this has been used before, but it&rsquo;s all pretty obvious; set <code>client</code> (
which is an already connected socket) as the socket on which to transport the
SSH session, add a keyfile, build a server-object and use that as the server.
The explanation for this is</p>

<blockquote><p>configure the authentication methods</p></blockquote>

<p>I&rsquo;m sorry, what? I guess this is technically correct, but it doesn&rsquo;t explain
<em>anything</em>. Sure, it&rsquo;s not that hard to understand, but still. The thing that
really annoys me is this: <code>bhSession.start_server(server=server)</code>. <code>bhSession</code>
is a paramiko-object of some kind, and to that objects member function
<code>start_server()</code> we pass our homebrewed Server-class. This means that, since
it will be used by a function in a library, the Server-class have to have some
functions and variables that should respond to different things. These are quite
important pieces of information if you want to build something yourself rather
than just copy and paste from a book. Alas, if I want to learn that I have to
consult the Paramiko documentation, because there isn&rsquo;t an explanation within
sight in the book.</p>

<p>I really don&rsquo;t mind reading documentation, but I do mind paying $34 for a book
that supposedly should teach me something, only to be forced to read open
documentation if I want more understanding than copying, pasting and running can
give. Fortunately I got the book in a HumbleBundle, so I hardly payed for it.
And maybe it gets better later in the book, but right now I don&rsquo;t have time to
find out. As I said, this is very much a first imporession of the book and I
will get back to it. I just really think it&rsquo;s a shame that they didn&rsquo;t make it
twice as long (it&rsquo;s just short of 165 pages) and elaborated on the explanations
more, so that you don&rsquo;t need to consult the documentation to understand what&rsquo;s
going on.</p>

<p>That&rsquo;s it for my rant on this book. I&rsquo;ll revisit it Sometime™ and write a real
review. But for now this will have to do. I&rsquo;ll have a review on another book I
recently read shortly, but until then</p>

<p>Happy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Learn You a Haskell for Great Good]]></title>
    <link href="http://erikbergenholtz.github.io/erikbergenholtz/blog/2017/01/14/review-learn-you-a-haskell/"/>
    <updated>2017-01-14T23:00:00+01:00</updated>
    <id>http://erikbergenholtz.github.io/erikbergenholtz/blog/2017/01/14/review-learn-you-a-haskell</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a long time coming, but now I am finally done reading
<a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good</a>, so it is
time for me not only to get coding, but also to review the book!</p>

<p>Haskell is a language that I&rsquo;ve been eyeballing for quite some time, but I have
hesitated to get started with it due to it being a functional programming
language. As a guy coming from a mainly imperative background (I do most work
in C or Python), this is quite different and without a good tutorial it seemed
quite inaccessible. Luckily for me, Learn You a Haskell showed up on
<a href="https://humblebundle.com">HumbleBundle</a> a while ago, so I took the opportunity
to buy it.</p>

<p>The book is aimed at people like me: people experienced in programming, but new
to functional programming. The book guides the reader though the core concepts
of Haskell in a conversational tone that is riddled with examples. The language
is easy to follow, and new concepts are described clearly. The powerfulness of
the language is shown both through descriptions in the text, but also with the
examples. In general I would say that it&rsquo;s a really good book that is very
worth reading.</p>

<p>However, the book has one downside; its lack of exercises. As mentioned, it is
full of examples, and they do great job at showing how things work and how
powerful the language is when used correctly. Unfortunately there are no clear
exercises. Some of the examples are extended through description, where the
actual implementation of the extension is left as an exercise to the reader,
but as someone who want to learn how to work with the language and have never
done anything functional before it is hard to come up with exercises for
yourself. I really do think that the book would benefit a lot from having
explicit tasks to do yourself at the end of each chapter. As it is now, I am
quite confident that I understand the concepts of the language after reading
the book, but I am far from confident with coding in it. Of course I would not
have become a Haskell wizard by reading the book even if it did have exercises,
but I think I would&rsquo;ve been closer.</p>

<p>Regardless I think that it is a really good book, and a really good
introduction to both Haskell and functional programming, and I am looking
forward to getting to know Haskell in a more practical way. As a final note
I&rsquo;d like to recommend it if you&rsquo;re interested in learning Haskell. There are a
lot of very large and crooked questionmarks surrounding the world of functional
programming if you&rsquo;re from an imperative or object oriented background, but the
book does a great job of straightening those into exclamation marks.</p>

<p>Now, I am going to delve into the next book, which will be
<a href="http://users.metu.edu.tr/serge/courses/111-2011/textbook-math111.pdf">How to Prove it</a>,
a review of that will come when I&rsquo;m done working through it.</p>

<p>Until the next time,</p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Me a Haskell for Great Good]]></title>
    <link href="http://erikbergenholtz.github.io/erikbergenholtz/blog/2016/12/09/learning-me-a-haskell-for-great-good/"/>
    <updated>2016-12-09T23:00:00+01:00</updated>
    <id>http://erikbergenholtz.github.io/erikbergenholtz/blog/2016/12/09/learning-me-a-haskell-for-great-good</id>
    <content type="html"><![CDATA[<p>Today I was informed roughly what I will be doing at work next semester (when I
say &ldquo;roughly&rdquo; I mean that the suggested work load probably is way through the
roof, and that it will need to be adjusted before the term starts), and one
of the things I&rsquo;ll be spending my time on is research. Since I am just a
project assistant and not a PhD student my research will be quite limited by
time (I will only spend 80 hours on it over the entire semester), but it&rsquo;s
something.</p>

<p>What my supervisor want me to do is have a look at a parsing library for
Haskell called <a href="https://github.com/aslatter/parsec">Parsec</a>. There&rsquo;s only one
problem; I don&rsquo;t know Haskell. Yet. So, today I set out on my journey to learn
my first functional programming language, and I thought I&rsquo;d let you in on the
fun. Starting with this post, I will be posting about my progress with learning
the (to me) new language. Maybe you&rsquo;ll be getting something out of it, maybe
not. I&rsquo;m going to do it regardless.</p>

<p>So, to start off I want to mention the book I&rsquo;ll be learning from. It&rsquo;s called
<a href="https://www.nostarch.com/lyah.htm">Learn You a Haskell for Great Good</a>, and is
published by <a href="https://www.nostarch.com/">No Starch Press</a>. I&rsquo;ll write a review
of the book once I&rsquo;m done working though it.</p>

<p>Now, without further adue, let&rsquo;s delve into Haskell! (Note that I&rsquo;m mostly by
no means going to try to teach you Haskell, I&rsquo;m mostly just going to ramble on
about things I find weird about the language)</p>

<p>As a C and Python programmer, Haskell seems quite strange. It feel a lot like
Python in the way that it is written, but some things are strange. For
instance, the following is perfectly legitimate syntax for Haskell:</p>

<pre><code class="haskell">foo x = (if x&gt;100 then x else x*2)+1
</code></pre>

<p>First of all, this is a function declaration and not a variable assingment. But
that&rsquo;s not the main thing that&rsquo;s bugging me about this. It&rsquo;s that the <code>if</code>
itself <em>returns</em> a value, which I can then add <code>1</code> to. As the book expresses
it: there is no such thing as an <code>if</code> <em>statement</em> in Haksell, there are <code>if</code>
<em>expressions</em> instead. Very strange.</p>

<p>Another thing that is qutie odd, but does make sense, is the way list items are
accessed. Coming from imperative languages, I am used to the <code>list[index]</code>
syntax if I want to access a list element. However, that kind of syntax
wouldn&rsquo;t be possible in Haskell, since Haskell has no variables. Insted the
syntax is</p>

<pre><code class="haskell">[1, 2, 3, 4, 5] !! 3
</code></pre>

<p>This would fetch <code>4</code>, which is the third item of the list. To finish off, I
want to mention a thing that&rsquo;s really weird with Haskell, but it&rsquo;s something
I wish all languages did: argument pattern matching. For instance, to build a
(probably poor) summing function one could do the following:</p>

<pre><code class="haskell">sum' (x:xs) = x + sum' xs
sum' [] = 0
</code></pre>

<p>This basically means that the function <code>sum'</code> takes a list, and puts the first
element in it&rsquo;s own variable. It then adds that to the recursive call to the
function itself. Once the list is empty (the <code>sum' []</code>), <code>0</code> is returned. No
<code>if</code> expressions, nothing. Just matching the input with an empty list.
Bloody brilliant!</p>

<p>Anyway, this post is already way longer than it should, so I&rsquo;m going to sign
off now.</p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
</feed>
